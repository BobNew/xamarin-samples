using System;
using System.Collections.Generic;

using Xamarin.Forms;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Blob;
using System.Diagnostics;
using System.Threading.Tasks;
using System.IO;
using System.Text;

namespace Teal
{
	public partial class Blob : ContentPage
	{
		public Blob ()
		{
			InitializeComponent ();
		}

		// TODO: this will need to be generated by you in the GenerateSharedAccessSignatures command line app
		string sas_powershell = "https://FROM_PORTAL.blob.core.windows.net/teal-test?sv=2014-02-14&sr=c&sig=oOL78KbL0sCUDT1l2oa2G5DN%2BrtlPhzz1Di6d%2BdylPw%3D&se=2015-05-06T17%3A35%3A05Z&sp=rwdl";
		string sas_terminal   = "https://FROM_PORTAL.blob.core.windows.net/teal-test?sv=2014-02-14&sr=c&sig=rz7NGiSR%2FotJeCOhkisdcI2WBlVVu%2BKrrGkg72shpOU%3D&se=2015-05-06T01%3A16%3A32Z&sp=rwdl";
		string sas = "";

		protected override void OnAppearing ()
		{
			sas = sas_terminal;

			base.OnAppearing ();
		}

		async void Blob_Clicked (object sender, EventArgs ea) {
			await UseContainerSAS (sas);
		}

		 async Task UseContainerSAS(string sas)
		{
			//Try performing container operations with the SAS provided.

			//Return a reference to the container using the SAS URI.
			CloudBlobContainer container = new CloudBlobContainer(new Uri(sas));
			string date = DateTime.Now.ToString();
			try
			{
				//Write operation: write a new blob to the container. 
				CloudBlockBlob blob = container.GetBlockBlobReference("xamarinblob_" + date + ".txt");

				string blobContent = textEntry.Text; //"This blob was created with a shared access signature granting write permissions to the container. ";
				MemoryStream msWrite = new MemoryStream(Encoding.UTF8.GetBytes(blobContent));
				msWrite.Position = 0;
				using (msWrite)
				{
					await blob.UploadFromStreamAsync(msWrite);
				}

				Debug.WriteLine("Write operation succeeded for SAS " + sas);
				Debug.WriteLine("");
			}
			catch (Exception e)
			{
				Debug.WriteLine("Write operation failed for SAS " + sas);
				Debug.WriteLine("Additional error information: " + e.Message);
				Debug.WriteLine("");
			}

			try
			{
				//Read operation: Get a reference to one of the blobs in the container and read it. 
				CloudBlockBlob blob = container.GetBlockBlobReference("xamarinblob_" + date + ".txt");
				string data = await blob.DownloadTextAsync();

				Debug.WriteLine("Read operation succeeded for SAS " + sas);
				Debug.WriteLine("Blob contents: " + data);

				output.Text = "READ BACK FROM SERVER:" 
					+ Environment.NewLine + Environment.NewLine 
					+ data;
			}
			catch (Exception e)
			{
				Debug.WriteLine("Additional error information: " + e.Message);
				Debug.WriteLine("Read operation failed for SAS " + sas);
				Debug.WriteLine("");
			}

			try
			{
				//Delete operation: Delete a blob in the container.
				CloudBlockBlob blob = container.GetBlockBlobReference("xamarinblob_" + date + ".txt");
				//CloudBlockBlob blob = container.GetBlockBlobReference("sasblob_” + date + “.txt");
				/*
Additional error information: <?xml version="1.0" encoding="utf-16"?><!--An exception has occurred. For more information please deserialize this message via RequestResult.TranslateFromExceptionMessage.-->
<RequestResult>
  <HTTPStatusCode>404</HTTPStatusCode>
  <HttpStatusMessage>The specified blob does not exist.</HttpStatusMessage>
  <TargetLocation>Primary</TargetLocation>
  <ServiceRequestID>26b235cb-0001-0009-345d-873767000000</ServiceRequestID>
  <ContentMd5 />
  <Etag />
  <RequestDate>Tue, 05 May 2015 10:58:59 GMT</RequestDate>
  <StartTime>Tue, 05 May 2015 17:58:59 GMT</StartTime>
  <EndTime>Tue, 05 May 2015 17:58:59 GMT</EndTime>
  <Error>
    <Code>BlobNotFound</Code>
    <Message>The specified blob does not exist.
RequestId:26b235cb-0001-0009-345d-873767000000
Time:2015-05-05T17:58:59.2841607Z</Message>
  </Error>
  <ExceptionInfo>
    <Type />
    <HResult>-2147467259</HResult>
    <Message>The specified blob does not exist.</Message>
    <Source>Microsoft.WindowsAzure.Storage</Source>
    <StackTrace>  at Microsoft.WindowsAzure.Storage.Shared.Protocol.HttpResponseParsers.ProcessExpectedStatusCodeNoException[NullType] (HttpStatusCode expectedStatusCode, HttpStatusCode actualStatusCode, Microsoft.WindowsAzure.Storage.Core.NullType retVal, Microsoft.WindowsAzure.Storage.Core.Executor.StorageCommandBase`1 cmd, System.Exception ex) [0x00004] in &lt;filename unknown&gt;:0 
  at Microsoft.WindowsAzure.Storage.Shared.Protocol.HttpResponseParsers.ProcessExpectedStatusCodeNoException[NullType] (HttpStatusCode expectedStatusCode, System.Net.Http.HttpResponseMessage resp, Microsoft.WindowsAzure.Storage.Core.NullType retVal, Microsoft.WindowsAzure.Storage.Core.Executor.StorageCommandBase`1 cmd, System.Exception ex) [0x00011] in &lt;filename unknown&gt;:0 
  at Microsoft.WindowsAzure.Storage.Blob.CloudBlob+&lt;&gt;c__DisplayClass77.&lt;GetBlobImpl&gt;b__75 (Microsoft.WindowsAzure.Storage.Core.Executor.RESTCommand`1 cmd, System.Net.Http.HttpResponseMessage resp, System.Exception ex, Microsoft.WindowsAzure.Storage.OperationContext ctx) [0x00014] in &lt;filename unknown&gt;:0 
  at Microsoft.WindowsAzure.Storage.Core.Executor.Executor+&lt;ExecuteAsyncInternal&gt;d__0`1[Microsoft.WindowsAzure.Storage.Core.NullType].MoveNext () [0x0059a] in &lt;filename unknown&gt;:0 </StackTrace>
  </ExceptionInfo>
</RequestResult>
				*/

				// await blob.DeleteAsync();
				//Debug.WriteLine("Delete operation succeeded for SAS " + sas);
				//Debug.WriteLine("");
			}
			catch (Exception e)
			{
				Debug.WriteLine("Delete operation failed for SAS " + sas);
				Debug.WriteLine("Additional error information: " + e.Message);
				//Debug.WriteLine("");
			}

			try {
				output.Text += Environment.NewLine + Environment.NewLine;
				// List blobs
				// 
				//http://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-how-to-use-blobs/#list-the-blobs-in-a-container
				BlobContinuationToken continuationToken = null;
				var x = await container.ListBlobsSegmentedAsync(continuationToken);
				foreach (IListBlobItem item in x.Results)
				{
					if (item.GetType() == typeof(CloudBlockBlob))
					{
						CloudBlockBlob blob = (CloudBlockBlob)item;
						Debug.WriteLine("Block blob of length {0}: {1}", blob.Properties.Length, blob.Uri);
						output.Text += blob.Uri + Environment.NewLine;
					}
					else if (item.GetType() == typeof(CloudPageBlob))
					{
						CloudPageBlob pageBlob = (CloudPageBlob)item;
						Debug.WriteLine("Page blob of length {0}: {1}", pageBlob.Properties.Length, pageBlob.Uri);
						output.Text += pageBlob.Uri + Environment.NewLine;
					}
					else if (item.GetType() == typeof(CloudBlobDirectory))
					{
						CloudBlobDirectory directory = (CloudBlobDirectory)item;
						Debug.WriteLine("Directory: {0}", directory.Uri);
						output.Text += directory.Uri + Environment.NewLine;
					}
				}
			}
			catch (Exception e)
			{
				Debug.WriteLine("Delete operation failed for SAS " + sas);
				Debug.WriteLine("Additional error information: " + e.Message);
				//Debug.WriteLine("");
			}
		}
	}
}